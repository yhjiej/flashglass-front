{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yassinehjiej/Documents/flashglass/flashglass-front/src/components/ui/toaster.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Toaster = registerClientReference(\n    function() { throw new Error(\"Attempted to call Toaster() from the server but Toaster is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/toaster.tsx <module evaluation>\",\n    \"Toaster\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,+DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/yassinehjiej/Documents/flashglass/flashglass-front/src/components/ui/toaster.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Toaster = registerClientReference(\n    function() { throw new Error(\"Attempted to call Toaster() from the server but Toaster is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/toaster.tsx\",\n    \"Toaster\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,UAAU,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACzC;IAAa,MAAM,IAAI,MAAM;AAA8N,GAC3P,2CACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/lexend_2755209a.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"lexend_2755209a-module__YVUIxa__className\",\n  \"variable\": \"lexend_2755209a-module__YVUIxa__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/lexend_2755209a.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Lexend%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22display%22:%22swap%22,%22variable%22:%22--font-lexend%22}],%22variableName%22:%22lexendFont%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Lexend', 'Lexend Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,yJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,yJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,yJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0]}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/yassinehjiej/Documents/flashglass/flashglass-front/src/i18n/routing.ts"],"sourcesContent":["import { createNavigation } from 'next-intl/navigation'\nimport { defineRouting } from 'next-intl/routing'\n\nexport const routing = defineRouting({\n\t// A list of all locales that are supported\n\tlocales: ['en', 'fr'],\n\n\t// Used when no locale matches\n\tdefaultLocale: 'fr',\n})\n\n// Lightweight wrappers around Next.js' navigation APIs\n// that will consider the routing configuration\nexport const { Link, redirect, usePathname, useRouter, getPathname } = createNavigation(routing)\n"],"names":[],"mappings":";;;;;;;;AACA;AADA;;;AAGO,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,gBAAa,AAAD,EAAE;IACpC,2CAA2C;IAC3C,SAAS;QAAC;QAAM;KAAK;IAErB,8BAA8B;IAC9B,eAAe;AAChB;AAIO,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,+OAAA,CAAA,mBAAgB,AAAD,EAAE"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/yassinehjiej/Documents/flashglass/flashglass-front/src/i18n/request.ts"],"sourcesContent":["import { getRequestConfig } from 'next-intl/server'\nimport { routing } from './routing'\n\nexport default getRequestConfig(async ({ requestLocale }) => {\n\t// This typically corresponds to the `[locale]` segment\n\tlet locale = await requestLocale\n\n\t// Ensure that a valid locale is used\n\tif (!locale || !routing.locales.includes(locale as (typeof routing.locales)[number])) {\n\t\tlocale = routing.defaultLocale\n\t}\n\n\treturn {\n\t\tlocale,\n\t\tmessages: (await import(`../messages/${locale}.json`)).default,\n\t}\n})\n"],"names":[],"mappings":";;;AACA;AADA;;;uCAGe,CAAA,GAAA,2OAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE,aAAa,EAAE;IACvD,uDAAuD;IACvD,IAAI,SAAS,MAAM;IAEnB,qCAAqC;IACrC,IAAI,CAAC,UAAU,CAAC,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAA6C;QACrF,SAAS,sHAAA,CAAA,UAAO,CAAC,aAAa;IAC/B;IAEA,OAAO;QACN;QACA,UAAU,CAAC;;;;;;;;;kBAAa,CAAC,YAAY,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IAC/D;AACD"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///Users/yassinehjiej/Documents/flashglass/flashglass-front/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import { Toaster } from '@/components/ui/toaster'\nimport type { Metadata } from 'next'\nimport { NextIntlClientProvider } from 'next-intl'\nimport { getMessages, setRequestLocale } from 'next-intl/server'\nimport { Lexend } from 'next/font/google'\nimport './globals.css'\n\nconst lexendFont = Lexend({\n\tsubsets: ['latin'],\n\tdisplay: 'swap',\n\tvariable: '--font-lexend',\n})\n\nexport const metadata: Metadata = {\n\ttitle: 'Flashglass',\n\tdescription: 'Generated by flashglass',\n}\n\nexport function generateStaticParams() {\n\treturn [{ locale: 'en' }, { locale: 'fr' }]\n}\n\nexport default async function RootLayout({\n\tchildren,\n\tparams,\n}: Readonly<{\n\tchildren: React.ReactNode\n\tparams: Promise<{ locale: string }>\n}>) {\n\tconst { locale } = await params\n\n\t// Enable static rendering\n\tsetRequestLocale(locale)\n\n\t// Providing all messages to the client\n\t// side is the easiest way to get started\n\tconst messages = await getMessages()\n\n\treturn (\n\t\t<html lang={locale}>\n\t\t\t<body className={`relative ${lexendFont.className} antialiased`}>\n\t\t\t\t<NextIntlClientProvider messages={messages}>{children}</NextIntlClientProvider>\n\t\t\t\t<Toaster />\n\t\t\t</body>\n\t\t</html>\n\t)\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAGA;AAAA;AADA;;;;;;;AAWO,MAAM,WAAqB;IACjC,OAAO;IACP,aAAa;AACd;AAEO,SAAS;IACf,OAAO;QAAC;YAAE,QAAQ;QAAK;QAAG;YAAE,QAAQ;QAAK;KAAE;AAC5C;AAEe,eAAe,WAAW,EACxC,QAAQ,EACR,MAAM,EAIL;IACD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IAEzB,0BAA0B;IAC1B,CAAA,GAAA,4PAAA,CAAA,mBAAgB,AAAD,EAAE;IAEjB,uCAAuC;IACvC,yCAAyC;IACzC,MAAM,WAAW,MAAM,CAAA,GAAA,iOAAA,CAAA,cAAW,AAAD;IAEjC,qBACC,8OAAC;QAAK,MAAM;kBACX,cAAA,8OAAC;YAAK,WAAW,CAAC,SAAS,EAAE,0IAAA,CAAA,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC;;8BAC9D,8OAAC,mPAAA,CAAA,yBAAsB;oBAAC,UAAU;8BAAW;;;;;;8BAC7C,8OAAC,mIAAA,CAAA,UAAO;;;;;;;;;;;;;;;;AAIZ"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}